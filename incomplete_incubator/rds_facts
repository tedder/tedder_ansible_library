#!/usr/bin/python
#
# copyright Ted Timmons 2015.
# ted@timmons.me github.com/tedder twitter.com/tedder42
#
# May be redistributed under the general MIT license, with exceptions found in /LICENSE.md.

DOCUMENTATION = '''
---
module: rds_inventory
version_added: "external"
short_description: 
description:
     - 
requirements: [ "boto3" ]
author: Ted Timmons
'''

EXAMPLES = '''
'''

import sys
import time
import boto3
import json
#from datetime import datetime
import datetime

from ansible.module_utils.basic import *
from ansible.module_utils.ec2 import *

def get_entry_from_dictarray(dictarray, keyname):
  for entry in dictarray:
    if entry['Key'] == keyname:
      return entry
  return None

def get_inventory(rds_client, region, account_number, match_tags=None):
  db_instances = rds_client.describe_db_instances(MaxRecords=100)

  ret = []

  # do some cleanup before returning
  for instance in db_instances['DBInstances']:
    identifier = "arn:aws:rds:" + region + ":" + str(account_number) + ":db:" + instance['DBInstanceIdentifier']
    tags = rds_client.list_tags_for_resource(ResourceName=identifier)
    instance_matched = True
    if match_tags:
      for name, value in match_tags.items():
        db_tag_entry = get_entry_from_dictarray(tags.get('TagList', [{}]), name)
        #ret.append({'tagentry':db_tag_entry})
        #ret.append({'tagentry':db_tag_entry, 'matchname':name, 'matchvalue':value})
        if not db_tag_entry:
          instance_matched = False
        elif value != db_tag_entry['Value']:
          instance_matched = False
        #else:
        #  ret.append({'matched':True, 'tagentry':db_tag_entry, 'matchname':name, 'matchvalue':value})
        # else means we keep trying
      # dropped out of the taglist, so we must've matched
    if instance_matched:
      ret.append({ 'matchtags': True, 'tags': serialize(tags), 'db': serialize(instance) })
    #else:
    #  ret.append({ 'matchtags': False, 'tags': serialize(tags), 'db': serialize(instance) })
    #ret.append({ 'tags': tags, 'db': instance })
  #return serialize(ret)
  return ret
  #return serialize(db_instances['DBInstances'])
  #return serialize(db_instances)

def serialize(items):
  '''Think of this as a pre-JSON-serializer. Since we return an object to
     Ansible and it handles serialization, we need to serialize things that
     don't serialize well in default cases. datetime is the most obvious.'''

  if isinstance(items, dict):
    ret = {}
    for key,value in items.items():
      if isinstance(value, dict):
        ret[key] = serialize(value)
      if isinstance(value, list):
        ret[key] = serialize(value)
      elif isinstance(value, datetime.datetime):
        ret[key] = value.isoformat()
      else:
        ret[key] = value
    return ret

  elif isinstance(items, list):
    ret = []
    for key in items:
      if isinstance(key, dict):
        ret.append(serialize(key))
      elif isinstance(key, datetime.datetime):
        ret.append(key.isoformat())
      else:
        ret.append(key)
    return ret
  return None

def main():
  argument_spec = dict(
    state=dict(default='inventory', choices=['inventory', 'facts']),
    region=dict(type='str'),
    account_number=dict(type='str', required=True), # hard to compose an ARN, making this a manual config is much easier.
    match_tags=dict()
  )
  #required_together = ( ['state', 's3_bucket_name'] )

  module = AnsibleModule(argument_spec=argument_spec, supports_check_mode=True)
  account_number = module.params.get('account_number')
  region = module.params.get('region')
  match_tags = module.params.get('match_tags', None)

  #ec2_url, access_key, secret_key, region = get_ec2_creds(module)
  #aws_connect_params = dict(aws_access_key_id=access_key,
  #                          aws_secret_access_key=secret_key)

  #if not region:
  #  module.fail_json(msg="Region must be specified as a parameter, in EC2_REGION or AWS_REGION environment variables or in boto configuration file")
  results = {}
  rds_client = boto3.client('rds')

  results['inventory'] = get_inventory(rds_client, region, account_number, match_tags)
  results['match_tags'] = match_tags

  module.exit_json(**results)
  #reparsed_results = json.loads(json.dumps(results, default=json_serial))
  #module.exit_json(**reparsed_results)



main()
